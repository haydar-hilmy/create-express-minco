#!/usr/bin/env node

import app from "../app.js";
import debugModule from "debug";
import http from "http";
import dotenv from "dotenv";
dotenv.config();

const debug = debugModule("express-minco:server");
const port = normalizePort(process.env.PORT || "3003");
app.set("port", port);

const server = http.createServer(app);

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

function onError(error) {
  if (error.syscall !== "listen") throw error;

  const bind = typeof port === "string" ? `Pipe ${port}` : `Port ${port}`;

  switch (error.code) {
    case "EACCES":
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? `pipe ${addr}` : `port ${addr.port}`;

  setTimeout(() => {
    const now = new Date().toLocaleString();
    const appName = "Express MVC";
    const env = app.get("env");
    const protocol = process.env.HTTPS === "true" ? "https" : "http";
    const url = `${protocol}://localhost:${addr.port}`;

    console.log("\x1b[1m\x1b[47m\x1b[30m[ APPLICATION STARTED ]\x1b[0m");
    console.log(`\x1b[36m➤  Name      :\x1b[0m ${appName}`);
    console.log(`\x1b[36m➤  Mode      :\x1b[0m ${env}`);
    console.log(`\x1b[36m➤  Started   :\x1b[0m ${now}`);
    console.log(`\x1b[36m➤  Listening :\x1b[0m ${url}`);
    console.log("\x1b[1m\x1b[32m✓ Server is running successfully!\x1b[0m");
  }, 800);
}
